openapi: 3.0.0
info:
  title: Scripture Quest API
  description: Interactive Bible Learning Application API
  version: 1.0.0
  contact:
    name: Scripture Quest Team
    email: support@scripturequest.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.scripturequest.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required:
        - email
        - username
      properties:
        id:
          type: string
          description: User ID
        email:
          type: string
          format: email
          description: User's email address
        username:
          type: string
          description: Unique username
        progress:
          type: array
          items:
            type: object
            properties:
              journeyId:
                type: string
              level:
                type: number
              score:
                type: number
              completedAt:
                type: string
                format: date-time
        memorizedVerses:
          type: array
          items:
            type: object
            properties:
              verseId:
                type: string
              reference:
                type: string
              mastered:
                type: boolean
        badges:
          type: array
          items:
            type: string
        role:
          type: string
          enum: [guest, user, admin]
        avatar:
          type: string
        stats:
          type: object
          properties:
            totalGamesPlayed:
              type: number
            totalScore:
              type: number
            versesMemorized:
              type: number
            streakDays:
              type: number
        createdAt:
          type: string
          format: date-time

    Game:
      type: object
      required:
        - type
        - title
        - description
        - theme
      properties:
        id:
          type: string
        type:
          type: string
          enum: [rescue, quiz, pictionary, memory, scavenger, verse, timeline, beatitudes, wordsearch, parable, audio, fourpictures]
        title:
          type: string
        description:
          type: string
        questions:
          type: array
          items:
            type: string
        levels:
          type: array
          items:
            type: string
        theme:
          type: string
        difficulty:
          type: string
          enum: [easy, medium, hard]
        isMultiplayer:
          type: boolean
        maxPlayers:
          type: number
        timeLimit:
          type: number
        settings:
          type: object
          properties:
            allowHints:
              type: boolean
            hintCost:
              type: number
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Question:
      type: object
      required:
        - text
        - type
        - answer
      properties:
        id:
          type: string
        text:
          type: string
        type:
          type: string
          enum: [multiple-choice, open-ended, fill-in, drawing, ordering, audio, matching, true-false]
        answer:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        options:
          type: array
          items:
            type: string
        reference:
          type: string
        hints:
          type: array
          items:
            type: string
        theme:
          type: string
        difficulty:
          type: string
          enum: [easy, medium, hard]
        gameTypes:
          type: array
          items:
            type: string
        isActive:
          type: boolean

    ApiResponse:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
        error:
          type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        data:
          type: null

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

security:
  - bearerAuth: []

paths:
  # Authentication Endpoints
  /api/v1/auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                username:
                  type: string
                  minLength: 3
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          description: User already exists

  /api/v1/auth/login:
    post:
      summary: Login user
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Invalid credentials

  /api/v1/auth/me:
    get:
      summary: Get current user profile
      tags: [Authentication]
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Games Endpoints
  /api/v1/games:
    get:
      summary: Get all games
      tags: [Games]
      security: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [rescue, quiz, pictionary, memory, scavenger, verse, timeline, beatitudes, wordsearch, parable, audio, fourpictures]
        - in: query
          name: difficulty
          schema:
            type: string
            enum: [easy, medium, hard]
        - in: query
          name: isMultiplayer
          schema:
            type: boolean
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of games
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    post:
      summary: Create new game (admin only)
      tags: [Games]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        '201':
          description: Game created successfully
        '403':
          description: Admin access required

  /api/v1/games/{id}:
    get:
      summary: Get game by ID
      tags: [Games]
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Game details
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/v1/games/{id}/session:
    post:
      summary: Create game session
      tags: [Games]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Game session created
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Users Endpoints
  /api/v1/users/{id}:
    get:
      summary: Get user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update user profile
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                preferences:
                  type: object
      responses:
        '200':
          description: User updated successfully

  /api/v1/users/{id}/progress:
    get:
      summary: Get user progress
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User progress data

    post:
      summary: Update user progress
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                journeyId:
                  type: string
                level:
                  type: number
                score:
                  type: number
      responses:
        '201':
          description: Progress updated successfully

  # Questions Endpoints
  /api/v1/questions:
    get:
      summary: Get all questions
      tags: [Questions]
      security: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
        - in: query
          name: theme
          schema:
            type: string
        - in: query
          name: difficulty
          schema:
            type: string
            enum: [easy, medium, hard]
        - in: query
          name: gameType
          schema:
            type: string
      responses:
        '200':
          description: List of questions

    post:
      summary: Create new question (admin only)
      tags: [Questions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '201':
          description: Question created successfully

  # Community Endpoints
  /api/v1/community/posts:
    get:
      summary: Get forum posts
      tags: [Community]
      security: []
      parameters:
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: search
          schema:
            type: string
      responses:
        '200':
          description: List of forum posts

    post:
      summary: Create forum post
      tags: [Community]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                category:
                  type: string
      responses:
        '201':
          description: Post created successfully

  /api/v1/community/verse-cards:
    get:
      summary: Get verse cards
      tags: [Community]
      security: []
      responses:
        '200':
          description: List of verse cards

    post:
      summary: Create verse card
      tags: [Community]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                verse:
                  type: string
                reference:
                  type: string
                background:
                  type: string
      responses:
        '201':
          description: Verse card created successfully

  # Progress Endpoints
  /api/v1/progress/leaderboard:
    get:
      summary: Get global leaderboard
      tags: [Progress]
      security: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [global, weekly, monthly]
            default: global
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Leaderboard data

  /api/v1/progress/daily-challenge:
    get:
      summary: Get today's daily challenge
      tags: [Progress]
      security: []
      responses:
        '200':
          description: Daily challenge data

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management and profiles
  - name: Games
    description: Game management and sessions
  - name: Questions
    description: Question management
  - name: Community
    description: Community features and forums
  - name: Progress
    description: User progress and achievements